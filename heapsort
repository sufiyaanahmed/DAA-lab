#include &lt;stdio.h&gt;
/* function to heapify a subtree. Here &#39;i&#39; is the
index of root node in array a[], and &#39;n&#39; is the size of heap. */
void heapify(int a[], int n, int i)
{
int largest = i; // Initialize largest as root
int left = 2 * i + 1; // left child
int right = 2 * i + 2; // right child
// If left child is larger than root
if (left &lt; n &amp;&amp; a[left] &gt; a[largest])
largest = left;
// If right child is larger than root
if (right &lt; n &amp;&amp; a[right] &gt; a[largest])
largest = right;
// If root is not largest
if (largest != i) {
// swap a[i] with a[largest]
int temp = a[i];
a[i] = a[largest];
a[largest] = temp;
heapify(a, n, largest);
}
}
/*Function to implement the heap sort*/
void heapSort(int a[], int n)
{
for (int i = n / 2 - 1; i &gt;= 0; i--)
heapify(a, n, i);
// One by one extract an element from heap
for (int i = n - 1; i &gt;= 0; i--) {
/* Move current root element to end*/
// swap a[0] with a[i]
int temp = a[0];
a[0] = a[i];
a[i] = temp;
heapify(a, i, 0);
}
}
/* function to print the array elements */
void printArr(int arr[], int n)
{
for (int i = 0; i &lt; n; ++i)
{
printf(&quot;%d&quot;, arr[i]);
printf(&quot; &quot;);
}
}
int main()
{
int a[] = {48, 10, 23, 43, 28, 26, 1};
int n = sizeof(a) / sizeof(a[0]);
printf(&quot;Before sorting array elements are - \n&quot;);
printArr(a, n);
heapSort(a, n);
printf(&quot;\nAfter sorting array elements are - \n&quot;);
printArr(a, n);
return 0;
}
Output:
